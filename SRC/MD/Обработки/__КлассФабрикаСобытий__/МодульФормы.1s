//*******************************************************
//*********************  ОПИСАНИЕ  **********************
//*******************************************************

//
// Класс 1С++ (Внешний отчет/обработка для 1С:Предприятие 7.7)
//
// Подсистема "Фабрика событий" v 1.0
// 
// Ловит и рассылает события глобального модуля и форм 1С
// другим классам-подписчикам 1С++, используя механизм 
// класса "МенеджерСобытий" компоненты 1С++.
// Позволяет объединять в одной конфигурации и параллельно 
// работать нескольким подсистемам (классам) использующим 
// перехват событий глобального модуля и форм.
//
// Делалась для объединения и совместной работы двух подсистем 
// "Доп. права доков" v 2.0 и "Сканы доков" v 2.0, т.е. после
// установки "Фабрики событий", предполагается, что будут
// установлены и эти подсистемы, или одна из них, т.к.
// сама по себе "Фабрика событий", без подписчиков, на рассылаемые
// ею события, особого смысла не имеет.
// Найти их можно на сайте: http://venger.narod.ru
// Или в моем профиле тут: http://infostart.ru/profile/20743/
//
// Автор: Венгер Александр, Одесса, 2010 [http://venger.narod.ru]
// 
// Используются внешние компоненты:
//   1С++ [http://www.1cpp.ru] и 
//   FormEx [http://www.dorex.ru]
// Скачать свежие версии 1cpp.dll и formex.dll можно тут:
//    1cpp.dll:  http://www.1cpp.ru/images/3/32/Icpp-latest.rar
//    formex.dll:  http://www.dorex.ru/files/?formex_t.zip
// Кидаем их в каталог с базой, либо в папку \Bin основной 
// программы и в глобальном модуле в процедуре 
// "ПриНачалеРаботыСистемы()" пишем две строчки:
//	  ЗагрузитьВнешнююКомпоненту("1cpp.dll"); 
//	  ЗагрузитьВнешнююКомпоненту("formex.dll"); 
//
// Подключается вставкой таких строк в глобальный модуль в 
// процедуру "ПриНачалеРаботыСистемы()", после кода загрузки
// внешних компонент:
// 	__Settings1cpp__=СоздатьОбъект("SettingsManager");
// 	__Settings1cpp__.Set("EnableHookEventsGroupContext",1);
// 	__Перехватчик__=СоздатьОбъект("Перехватчик"); 	
// 	__Перехватчик__.СнятьПерехватСобытийГлобальногоМодуля();
//	__КлассФабрикаСобытий__=СоздатьОбъект("__КлассФабрикаСобытий__");
//	__Перехватчик__.ПерехватитьСобытияГлобальногоМодуля(__КлассФабрикаСобытий__);
// 
// Предполагается наличие в конфигурации (есть в предлагаемой md'шке):
//   а) объявления этого класса в обработке "defcls":
//		//# класс __КлассФабрикаСобытий__ = __КлассФабрикаСобытий__@MD
//		//# {};
//   б) Определения этого класса в обработке "__КлассФабрикаСобытий__",
//      т.е. фактически наличие кода этого класса в конфе в обработке с
//      именем "__КлассФабрикаСобытий__"
//
// Заметки:  Важен порядок подключения подсистем в коде глобального модуля 
//           в процедуре "ПриНачалеРаботыСистемы()", т.е. сначала код подключения
//           "Фабрики событий", потом "Доп. прав доков", потом "Сканов доков",
//           так будет оптимальнее всего:
//
//				// Загрузка внешних компонент
//				Если ЗагрузитьВнешнююКомпоненту("1cpp.dll")<=0 Тогда
//					Предупреждение("Не загружена внешняя компонента 1С++",10);
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				Если ЗагрузитьВнешнююКомпоненту("formex.dll")<=0 Тогда
//					Предупреждение("Не загружена внешняя компонента FormEx",10);
//					СтатусВозврата(0);
//					Возврат;
//				КонецЕсли;
//				
//				// Подключение подсистемы "Фабрика событий"
//				__Settings1cpp__=СоздатьОбъект("SettingsManager");
//				__Settings1cpp__.Set("EnableHookEventsGroupContext",1);
//				__Перехватчик__=СоздатьОбъект("Перехватчик"); 	
//				__Перехватчик__.СнятьПерехватСобытийГлобальногоМодуля();
//			    __КлассФабрикаСобытий__=СоздатьОбъект("__КлассФабрикаСобытий__");
//				__Перехватчик__.ПерехватитьСобытияГлобальногоМодуля(__КлассФабрикаСобытий__);
//				
//				// Подключение подсистемы "Доп. права для доков"
//				__КлассПодсистемыДопПраваДоков__=СоздатьОбъект("__КлассПодсистемыДопПраваДоков__");
//				__КлассПодсистемыДопПраваДоков__.ПодписатьКлассНаСобытияФабрики(__КлассФабрикаСобытий__);	
//			
//				// Подключение подсистемы "Сканы доков"
//				__КлассПодсистемыСканыДоков__=СоздатьОбъект("__КлассПодсистемыСканыДоков__");
//				__КлассПодсистемыСканыДоков__.ДобавитьДопГлобМодуль();
//				__КлассПодсистемыСканыДоков__.ПодписатьКлассНаСобытияФабрики(__КлассФабрикаСобытий__);
//
//

//*******************************************************
//********************  ОБЪЯВЛЕНИЯ  *********************
//*******************************************************

//-------------------------------------------------------
Перем ИдКласса,КонтФормы;

Перем СписокКлассовПодписчиков Экспорт;

Перем СобытиеГМ_ПриОткрытии Экспорт; 
Перем Событие_ПослеОткрытия Экспорт; 
Перем Событие_ПриИзмененииРазмераОкна Экспорт;
Перем Событие_ПриВыбореЗакладки Экспорт;
Перем СобытиеГМ_ПриУдаленииДокумента Экспорт;
Перем СобытиеГМ_ПриИзмененииВремениДокумента Экспорт;
Перем СобытиеГМ_ПриОтменеПроведенияДокумента Экспорт;
Перем Событие_ПриЗаписи Экспорт;
Перем Событие_ОбработкаПроведения Экспорт;

Перем КлючКласса Экспорт; //+(MA)@TOC, 2020.12.06 [Фабрика событий]
//-------------------------------------------------------


//+(MA)@TOC, 2020-12-01 16:03:08 [Фабрика событий]
Перем ЭтоПерехватчикГМ Экспорт;
Перем ЭтоПерехватчикГК Экспорт;
Перем КонтекстФормы;
Перем Информатор, ВыполняемыйМодуль;
Перем ПодписчикиСобытий;
Перем УправлениеНастройками;
Перем Перехватчик;
///(MA)@TOC, 2020-12-01 16:03:08 [Фабрика событий]

Перем ТОК_Отладка Экспорт; //+(MA)@TOC, 2020.12.06 [Фабрика событий]


//------------------Внешний интерфейс--------------------
// Метод включает перехват событий контекста переданной формы
Процедура ВключитьПерехватСобытийГК(Конт = "") Экспорт Далее

//-------------Служебные процедуры и функции-------------
Функция GetThis(Конт) Далее

//*******************************************************
//*******************  ОПРЕДЕЛЕНИЯ  *********************
//*******************************************************

/////////////////////////////////////////////////////////
//*********************** События *********************//
/////////////////////////////////////////////////////////


//======================================================================
Процедура ТОК_ОтладкаИнициализация() Экспорт
	ТОК_Отладка = СоздатьОбъект("ТОК.Отладка");
	ТОК_Отладка.РежимОтладки = 1;
	ТОК_Отладка.Предупреждать = 0;
КонецПроцедуры // ТОК_ОтладкаИнициализация

//+(MA)@TOC, 2020-12-01 16:42:21 [Фабрика событий]
//======================================================================
Процедура ТОК_Конструктор()
	ТОК_ОтладкаИнициализация();
	
	ПодписчикиСобытий = СоздатьОбъект("АссоциативныйВектор");
	Информатор = СоздатьОбъект("Информатор");
	ВыполняемыйМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	
	//+(MA)@TOC, 2020.12.08 [Фабрика событий]
	//Сервис = СоздатьОбъект("Сервис");
	//ВыполняемыйМодуль = СоздатьОбъект("ВыполняемыйМодуль");
	//ВыполняемыйМодуль.УстановитьМодуль("л = _КлассФабрикаСобытий_ГМСуществует");
	//Попытка
	//	ВыполняемыйМодуль.КомпилироватьМодуль();
	//	
	//Исключение
	//	
	//	ДопГМ = Сервис.ДобавитьГлобальныйМодуль("Перем _КлассФабрикаСобытий_ГМСуществует Экспорт;
	//	|Перем _КлассФабрикаСобытий_Текущий Экспорт;");
	//	ТОК_Отладка.Соо("ДопГМ::"+ДопГМ);
	//КонецПопытки;
	///(MA)@TOC, 2020.12.08 [Фабрика событий]
	
КонецПроцедуры // ТОК_Конструктор
///(MA)@TOC, 2020-12-01 16:42:21 [Фабрика событий]


//-------------------------------------------------------
Процедура Конструктор()
	
	ТОК_Конструктор(); //+(MA)@TOC, 2020-12-01 16:20:21 [Фабрика событий]
	ТОК_Отладка.Соо("Конструктор()");
	ИдКласса="__КлассФабрикаСобытий__"; // В коде глоб. модуля при подключении, в пофигаторе имя обработки и объявления класса
	СписокКлассовПодписчиков=СоздатьОбъект("СписокЗначений");

	//-(MA)@TOC, 2020.12.06 [Фабрика событий]
	//	СобытиеГМ_ПриОткрытии = СоздатьОбъект("МенеджерСобытий");
	//	Событие_ПослеОткрытия = СоздатьОбъект("МенеджерСобытий");
	//	Событие_ПриИзмененииРазмераОкна = СоздатьОбъект("МенеджерСобытий");
	//	Событие_ПриВыбореЗакладки = СоздатьОбъект("МенеджерСобытий");
	//	СобытиеГМ_ПриУдаленииДокумента = СоздатьОбъект("МенеджерСобытий");
	//	СобытиеГМ_ПриИзмененииВремениДокумента = СоздатьОбъект("МенеджерСобытий");
	//	СобытиеГМ_ПриОтменеПроведенияДокумента = СоздатьОбъект("МенеджерСобытий");
	//	Событие_ПриЗаписи = СоздатьОбъект("МенеджерСобытий");
	//	Событие_ОбработкаПроведения = СоздатьОбъект("МенеджерСобытий");
	///(MA)@TOC, 2020.12.06 [Фабрика событий]

КонецПроцедуры	// Конструктор
//-------------------------------------------------------

//======================================================================
Процедура Деструктор()
	ТОК_Отладка.Соо("Деструктор()");
КонецПроцедуры // Деструктор

//-------------------------------------------------------
Процедура ВключитьПерехватСобытийГК(Конт = "") Экспорт
	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
		КонтФормы = Конт;
		КонтекстФормы = Конт; //+(MA)@TOC, 2020-12-01 17:13:31 [ТОК_УправлениеФормой]
	КонецЕсли;
	Перехватчик = СоздатьОбъект("Перехватчик");

	//*(MA)@TOC, 2020-12-01 17:15:31 [ТОК_УправлениеФормой]
	//	Перехватчик.ПерехватитьСобытияГК(КонтФормы,Контекст);
	Перехватчик.СнятьПерехватСобытийГK(КонтекстФормы);
	Перехватчик.ПерехватитьСобытияГК(КонтекстФормы,я());
	///(MA)@TOC, 2020-12-01 17:15:31 [ТОК_УправлениеФормой]

КонецПроцедуры  // ВключитьПерехватСобытийГК
//-------------------------------------------------------


//-(MA)@TOC, 2020-12-01 16:22:22 [ТОК_УправлениеФормой]
////-------------------------------------------------------
//Функция СобытиеГМ_ПриОткрытии(Конт, ФлагЧтенияНастройки) Экспорт
//	Рез=1;
//	//Сообщить("СобытиеГМ_ПриОткрытии "+СписокКлассовПодписчиков.РазмерСписка());
//	//Сообщить("СлучЧисло = " + СлучЧисло);
//	Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
//		КонтФормы = Конт;
//	КонецЕсли;
//	ФормаРасш = СоздатьОбъект("РасширениеФормы"); 
//	ФормаРасш.УстановитьФорму(КонтФормы.Форма);
//	//*(MA)@TOC, [Фабрика событий] 2020-10-08 02:49:02
//	//	Если (Найти(ФормаРасш.ПолныйТипОбъекта(),"Справочник.")>0) ИЛИ (Найти(ФормаРасш.ПолныйТипОбъекта(),"Счет.")>0) Тогда	
//	//		
//	//	Иначе
//	//		ПерехватчикСобытийФормы = СоздатьОбъект(ИдКласса); 
//	//		Для Сч=1 По СписокКлассовПодписчиков.РазмерСписка() Цикл
//	//			КлассПодсистемы=СоздатьОбъект(СписокКлассовПодписчиков.ПолучитьЗначение(Сч));
//	//			КлассПодсистемы.ПодписатьКлассНаСобытияФабрики(ПерехватчикСобытийФормы);
//	//		КонецЦикла;	
//	//		ПерехватчикСобытийФормы.ВключитьПерехватСобытийГК(Конт);
//	//	КонецЕсли;
//	// -------- заменено на:
//		ПерехватчикСобытийФормы = СоздатьОбъект(ИдКласса); 
//		Для Сч=1 По СписокКлассовПодписчиков.РазмерСписка() Цикл
//			КлассПодсистемы=СоздатьОбъект(СписокКлассовПодписчиков.ПолучитьЗначение(Сч));
//			КлассПодсистемы.ПодписатьКлассНаСобытияФабрики(ПерехватчикСобытийФормы);
//		КонецЦикла;	
//		ПерехватчикСобытийФормы.ВключитьПерехватСобытийГК(Конт);
//	///(MA)@TOC, [Фабрика событий] 2020-10-08 02:49:02
//	
//    Если СобытиеГМ_ПриОткрытии.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//        сз.ДобавитьЗначение(Конт, "Конт");
//		сз.ДобавитьЗначение(ФлагЧтенияНастройки, "ФлагЧтенияНастройки");
//        Рез=Число(СобытиеГМ_ПриОткрытии.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Возврат Рез;
//КонецФункции	// СобытиеГМ_ПриОткрытии
////-------------------------------------------------------
///(MA)@TOC, 2020-12-01 16:22:22 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020-12-01 16:02:26 [ТОК_УправлениеФормой]
////-------------------------------------------------------
//Функция Событие_ПослеОткрытия() Экспорт
//	Рез=1;
//	КонтОбъекта = GetThis(Контекст).ПолучитьКонтекстОкружения();
//	Если ТипЗначенияСтр(КонтОбъекта) <> "ГрупповойКонтекст" Тогда
//		Если ТипЗначенияСтр(КонтФормы) = "ГрупповойКонтекст" Тогда
//			КонтОбъекта= КонтФормы;		
//		Иначе
//			Возврат Рез;
//		КонецЕсли;
//	КонецЕсли;
//	Если Событие_ПослеОткрытия.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(КонтОбъекта,"КонтОбъекта");
//        Рез=Число(Событие_ПослеОткрытия.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтОбъекта,"ПослеОткрытия");
//	КонецЕсли;
//	
//	Возврат Рез;
//КонецФункции	// Событие_ПослеОткрытия
////-------------------------------------------------------	
///(MA)@TOC, 2020-12-01 16:02:26 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020-12-01 16:30:25 [ТОК_УправлениеФормой]
////-------------------------------------------------------	
//Функция Событие_ПриЗаписи() Экспорт
//	СписокПериодРекв="";
//	
//	Рез=1;
//	КонтОбъекта = GetThis(Контекст).ПолучитьКонтекстОкружения();
//	Если ТипЗначенияСтр(КонтОбъекта) <> "ГрупповойКонтекст" Тогда
//		Если ТипЗначенияСтр(КонтФормы) = "ГрупповойКонтекст" Тогда
//			КонтОбъекта= КонтФормы;		
//		Иначе
//			Возврат Рез;
//		КонецЕсли;
//	КонецЕсли;
//	Если Событие_ПриЗаписи.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(КонтОбъекта,"КонтОбъекта");
//		сз.ДобавитьЗначение(СписокПериодРекв,"СписокПериодРекв");
//        Рез=Число(Событие_ПриЗаписи.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		ФормаРасш = СоздатьОбъект("РасширениеФормы"); 
//		ФормаРасш.УстановитьФорму(КонтОбъекта.Форма);
//		Если (Найти(ФормаРасш.ПолныйТипОбъекта(),"Справочник.")>0) ИЛИ (Найти(ФормаРасш.ПолныйТипОбъекта(),"Счет.")>0) Тогда	
//			Перехватчик = СоздатьОбъект("Перехватчик");
//			Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтОбъекта,"ПриЗаписи",СписокПериодРекв);
//		Иначе
//			Перехватчик = СоздатьОбъект("Перехватчик");
//			Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтОбъекта,"ПриЗаписи");
//		КонецЕсли;	
//	КонецЕсли;
//	
//	Возврат Рез;
//КонецФункции	// Событие_ПриЗаписи
////-------------------------------------------------------	
///(MA)@TOC, 2020-12-01 16:30:25 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020-12-01 16:50:14 [ТОК_УправлениеФормой]
////-------------------------------------------------------	
//Функция Событие_ПриВыбореЗакладки(Ном,Зн) Экспорт
//	Рез=1;
//	КонтОбъекта = GetThis(Контекст).ПолучитьКонтекстОкружения();
//	Если ТипЗначенияСтр(КонтОбъекта) <> "ГрупповойКонтекст" Тогда
//		Если ТипЗначенияСтр(КонтФормы) = "ГрупповойКонтекст" Тогда
//			КонтОбъекта= КонтФормы;		
//		Иначе
//			Возврат Рез;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Событие_ПриВыбореЗакладки.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(КонтОбъекта,"КонтОбъекта");
//		сз.ДобавитьЗначение(Ном,"Ном");
//		сз.ДобавитьЗначение(Зн,"Зн");
//        Рез=Число(Событие_ПриВыбореЗакладки.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтОбъекта,"ПриВыбореЗакладки",Ном,Зн);
//	КонецЕсли;
//		
//	Возврат Рез;
//КонецФункции	// Событие_ПриВыбореЗакладки
///(MA)@TOC, 2020-12-01 16:50:14 [ТОК_УправлениеФормой]

//-------------------------------------------------------	


//-(MA)@TOC, 2020-12-01 16:28:26 [ТОК_УправлениеФормой]
////-------------------------------------------------------	
//Функция Событие_ПриИзмененииРазмераОкна(ТипСобытия,Ширина,Высота) Экспорт  
//	Сообщить(ИдКласса + ".Событие_ПриИзмененииРазмераОкна");
//	Рез=1;
//	КонтОбъекта = GetThis(Контекст).ПолучитьКонтекстОкружения();
//	Если ТипЗначенияСтр(КонтОбъекта) <> "ГрупповойКонтекст" Тогда
//		Если ТипЗначенияСтр(КонтФормы) = "ГрупповойКонтекст" Тогда
//			КонтОбъекта= КонтФормы;		
//		Иначе
//			Возврат Рез;
//		КонецЕсли;
//	КонецЕсли;
//	Если Событие_ПриИзмененииРазмераОкна.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(КонтОбъекта,"КонтОбъекта");
//		сз.ДобавитьЗначение(ТипСобытия,"ТипСобытия");
//		сз.ДобавитьЗначение(Ширина,"Ширина");
//		сз.ДобавитьЗначение(Высота,"Высота");
//        Рез=Число(Событие_ПриИзмененииРазмераОкна.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтОбъекта,"ПриИзмененииРазмераОкна",ТипСобытия,Ширина,Высота);
//	КонецЕсли;
//	Возврат Рез;
//КонецФункции	// Событие_ПриИзмененииРазмераОкна
////-------------------------------------------------------		
///(MA)@TOC, 2020-12-01 16:28:26 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020-12-01 16:46:06 [ТОК_УправлениеФормой]
////-------------------------------------------------------		
//Функция СобытиеГМ_ПриУдаленииДокумента(Док,Режим) Экспорт
//	Рез=1;
//	Если СобытиеГМ_ПриУдаленииДокумента.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(Док,"Док");
//		сз.ДобавитьЗначение(Режим,"Режим");
//        Рез=Число(СобытиеГМ_ПриУдаленииДокумента.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриУдаленииДокумента",Док,Режим);
//	КонецЕсли;
//	
//	Возврат Рез;	
//КонецФункции	// СобытиеГМ_ПриУдаленииДокумента
////-------------------------------------------------------		
///(MA)@TOC, 2020-12-01 16:46:06 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020-12-01 16:37:06 [ТОК_УправлениеФормой]
////-------------------------------------------------------		
//Функция СобытиеГМ_ПриИзмененииВремениДокумента(Док) Экспорт
//	Рез=1;
//	Если СобытиеГМ_ПриИзмененииВремениДокумента.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(Док,"Док");
//        Рез=Число(СобытиеГМ_ПриИзмененииВремениДокумента.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриИзмененииВремениДокумента",Док);
//	КонецЕсли;
//	
//	Возврат Рез;	
//КонецФункции	// СобытиеГМ_ПриИзмененииВремениДокумента
////-------------------------------------------------------			
///(MA)@TOC, 2020-12-01 16:37:06 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020-12-01 16:28:06 [ТОК_УправлениеФормой]
////-------------------------------------------------------			
//Функция СобытиеГМ_ПриОтменеПроведенияДокумента(Док) Экспорт
//	Рез=1;	
//	Если СобытиеГМ_ПриОтменеПроведенияДокумента.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(Док,"Док");
//        Рез=Число(СобытиеГМ_ПриОтменеПроведенияДокумента.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриОтменеПроведенияДокумента",Док);
//	КонецЕсли;
//	
//	Возврат Рез;		
//КонецФункции	// СобытиеГМ_ПриОтменеПроведенияДокумента
////-------------------------------------------------------			
///(MA)@TOC, 2020-12-01 16:28:06 [ТОК_УправлениеФормой]



//-(MA)@TOC, 2020.12.03 [Фабрика событий]
////-------------------------------------------------------			
//Функция Событие_ОбработкаПроведения(Конт,Параметры) Экспорт
//	Рез=1;
//	//Сообщить("Фабрика.Событие_ОбработкаПроведения "+СписокКлассовПодписчиков.РазмерСписка());
//	//Сообщить("СлучЧисло = " + СлучЧисло);
//	Если Событие_ОбработкаПроведения.Пустой() = 0 Тогда
//        сз = СоздатьОбъект("СписокЗначений");
//		сз.ДобавитьЗначение(Конт,"Конт");
//		сз.ДобавитьЗначение(Параметры,"Параметры");
//        Рез=Число(Событие_ОбработкаПроведения.ПослатьСобытие(GetThis(Контекст), сз));
//	КонецЕсли;
//	Если Рез>0 Тогда
//		Перехватчик = СоздатьОбъект("Перехватчик");
//		Рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(Конт,"ОбработкаПроведения",Параметры);
//	КонецЕсли;
//	
//	Возврат Рез;		
//	
//КонецФункции	
////-------------------------------------------------------			
///(MA)@TOC, 2020.12.03 [Фабрика событий]


/////////////////////////////////////////////////////////
//********** Служебные процедуры и функции ************//
/////////////////////////////////////////////////////////

//-------------------------------------------------------
Функция GetThis(Конт) Возврат Конт; КонецФункции
//-------------------------------------------------------

//*******************************************************
//*******************************************************
//*******************************************************

//{ Управление подпиской на события
Процедура ДобавитьПодписчикаСобытия(КонтекстОбработчика,ИДПодписчика,ИДСобытия,ВызываемыйМетод="") Экспорт
	фн = "ДобавитьПодписчикаСобытия";
	ИДПодписчика = СтрЗаменить(ИДПодписчика,".","_");
	ИДПодписчика = СокрЛП(ИДПодписчика);
	ТОК_Отладка.о(фн+"(КонтОбработчика,"+ИДПодписчика+","+ИДСобытия+","+ВызываемыйМетод+")");
	Если ПодписчикиСобытий.НайтиКлюч(ИДСобытия,0) = -1 Тогда
		ТОК_Отладка.о("Создание вектора контекстов");
		ВекторКонтекстов = СоздатьОбъект("АссоциативныйВектор");
		ПодписчикиСобытий.Добавить(ВекторКонтекстов,ИДСобытия);
		ТОК_Отладка.з("Создание вектора контекстов");
	КонецЕсли;
	
	ВекторКонтекстов = ПодписчикиСобытий.Получить(ИДСобытия);
	Если ВекторКонтекстов.НайтиКлюч(ИДПодписчика,0) = -1 Тогда
		ВекторТекКонтекста = СоздатьОбъект("АссоциативныйВектор");
		ВекторКонтекстов.Добавить(ВекторТекКонтекста,ИДПодписчика);
	КонецЕсли;	
	
	ВекторТекКонтекста = ВекторКонтекстов.Получить(ИДПодписчика);
	Если ВекторТекКонтекста.НайтиКлюч("ВызываемыйМетод",0) = -1 Тогда
		ТекВызываемыйМетод = ?(ВызываемыйМетод = "", ИДСобытия, ВызываемыйМетод);
		ВекторТекКонтекста.Добавить(ТекВызываемыйМетод, "ВызываемыйМетод")
	КонецЕсли;
	Если ВекторТекКонтекста.НайтиКлюч("КонтекстОбработчика",0) = -1 Тогда
		ВекторТекКонтекста.Добавить(КонтекстОбработчика, "КонтекстОбработчика");
	КонецЕсли;
	
	ТОК_Отладка.з(фн);
	//Сообщить("ПодписчикиСобытий.НайтиКлюч("""+ИДСобытия+""",0) :: "+ПодписчикиСобытий.НайтиКлюч(ИДСобытия,0));
КонецПроцедуры

Процедура УдалитьПодписчикаСобытия(ИДПодписчика) Экспорт
	Для НомерЗначения = 0 По ПодписчикиСобытий.Количество()-1 Цикл
		ВекторКонтекстов = ПодписчикиСобытий.Получить(НомерЗначения);
		Если ВекторКонтекстов.НайтиКлюч(ИДПодписчика,0) = 1 Тогда
			ВекторКонтекстов.Удалить(ИДПодписчика);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция  СообщитьПодписчикамОсновная(ИДСобытия,Параметры = "") Экспорт
	Рез = 1;
	фн = "СообщитьПодписчикамОсновная :: "+ИДСобытия;
	//ТОК_Отладка.о(фн);
	Если ПодписчикиСобытий.НайтиКлюч(ИДСобытия,0) = -1 Тогда
		//ТОК_Отладка.з(фн);
		Возврат Рез;
	КонецЕсли;
	
	ТОК_Отладка.о(фн);
	Если ПустоеЗначение(Параметры) = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	ВекторКонтекстов = ПодписчикиСобытий.Получить(ИДСобытия);
	
	ТОК_Отладка.Соо("СообщитьПодписчикам::ИДСобытия::"+ИДСобытия+"::ВекторКонтекстов.Количество()::"+ВекторКонтекстов.Количество());
	
	Для НомерКонтекста = 0 По ВекторКонтекстов.Количество()-1 Цикл
		ВекторТекКонтекста = ВекторКонтекстов.Получить(НомерКонтекста);
		КонтекстПодписчика = ВекторТекКонтекста.Получить("КонтекстОбработчика");
		ВыполняемыйМетод = ВекторТекКонтекста.Получить("ВызываемыйМетод");
		Попытка
			//КонтекстПодписчика.КонтекстФормы = КонтекстФормы;
			
			ТОК_Отладка.Соо("		СообщитьПодписчикам::"+ВекторКонтекстов.ПолучитьКлюч(НомерКонтекста));
			ТОК_Отладка.Соо("     								КонтекстПодписчика::"+ТипЗначенияСтр(КонтекстПодписчика));
			ТОК_Отладка.Соо("     								ВыполняемыйМетод::"+ВыполняемыйМетод);
			
			Если ВыполняемыйМодуль.ВыполнитьФункциюКонтекста(КонтекстПодписчика, ВыполняемыйМетод, Параметры, Рез) = 0 Тогда //Такой функции в контексте подписчика нет
				ВыполняемыйМодуль.ВыполнитьПроцедуруКонтекста(КонтекстПодписчика, ВыполняемыйМетод, Параметры);	
			КонецЕсли;	
			
		Исключение
			
			ТОК_Отладка.Соо("		НЕ УДАЛОСЬ ВЫПОЛНИТЬ ФУНКЦИЮ КОНТЕКСТА :: "+ТипЗначенияСтр(КонтекстПодписчика)+"::"+ВыполняемыйМетод);
			ТОК_Отладка.Соо("		МетодСуществует :: "+ВыполняемыйМетод+" :: "+Информатор.МетодСуществует(КонтекстПодписчика, ВыполняемыйМетод));
			//ВыполняемыйМодуль.ВыброситьИскл(КонтекстПодписчика);
		КонецПопытки;
	КонецЦикла;

	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции

Функция  СообщитьПодписчикам(ИДСобытия,Параметры = "") Экспорт
	Рез = 1;
	фн = "СообщитьПодписчикам :: "+ИДСобытия;
	
//	ТОК_Отладка.о(фн);
	
	Рез = СообщитьПодписчикамОсновная(ИДСобытия, Параметры);
	Рез = ?(Рез = 0, Рез, СообщитьПодписчикамОсновная("Событие_"	+ИДСобытия, Параметры));
	Рез = ?(Рез = 0, Рез, СообщитьПодписчикамОсновная("СобытиеГМ_"	+ИДСобытия, Параметры));
	
//	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции
//}

Функция Событие_ОбработкаПроведения(КонтекстОбъекта,Параметры) Экспорт
	Рез = 1;
	фн = "Событие_ОбработкаПроведения";
	ТОК_Отладка.о(фн);
	
	ВыполнитьОригинальноеСобытие = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КонтекстОбъекта", КонтекстОбъекта);
	СЗПараметры.Установить("Параметры", Параметры);
	
	//====================================================================================================
	ТОК_Отладка.Соо("Событие_ОбработкаПроведения::ОбработкаПроведенияДо");
	Рез = СообщитьПодписчикам("ОбработкаПроведенияДо",СЗПараметры);
	ТОК_Отладка.Соо("Событие_ОбработкаПроведения::ТипЗначенияСтр(Рез)::"+ТипЗначенияСтр(Рез));
	Если ТипЗначенияСтр(Рез) = "СписокЗначений" Тогда
		ВыполнитьОригинальноеСобытие = Рез.Получить("ВыполнитьОригинальноеСобытие");
		Рез = Рез.Получить("Результат");
	КонецЕсли;	
	
	Если Рез = 1 Тогда
		ВыполнитьОригинальноеСобытие = СЗПараметры.Получить("ВыполнитьОригинальноеСобытие");
		ТОК_Отладка.Соо("Событие_ОбработкаПроведения::ВыполнитьОригинальноеСобытие::"+ВыполнитьОригинальноеСобытие);
		Если ВыполнитьОригинальноеСобытие = 1 Тогда
	
			Перехватчик = СоздатьОбъект("Перехватчик");
			рез=Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстОбъекта,"ОбработкаПроведения",Параметры);
		КонецЕсли;	
	КонецЕсли;
	
	//=====================================================================================================
	Рез = СообщитьПодписчикам("ОбработкаПроведенияПосле",СЗПараметры);
	
	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции	

//{ предопределенные события гм 1С

Функция СобытиеГМ_ПриОткрытии(пКонтекстФормы, ФлагЧтенияНастройки) Экспорт
	Рез = 1;
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(пКонтекстФормы.Форма);
	фн = "СобытиеГМ_ПриОткрытии." + РасширениеФормы.ПолныйТипОбъекта();
	ТОК_Отладка.о(фн);
	
	КонтекстФормы = пКонтекстФормы;
	
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КонтекстФормы", КонтекстФормы);
	СЗПараметры.Установить("ФлагЧтенияНастройки", ФлагЧтенияНастройки);
	
	т1 = "СообщитьПодписчикам";
	ТОК_Отладка.о(т1);
	
	я().СообщитьПодписчикам("ПриОткрытии",СЗПараметры);
	
	ТОК_Отладка.з(т1);
	
	т1 = "Создание перехватчика ГК и создание копий подписчиков";
	ТОК_Отладка.о(т1);
	
	ПерехватчикГК = СоздатьОбъект(ТипЗначенияСтр(я()));
	
	ВекторТиповКонтекстов = СоздатьОбъект("АссоциативныйВектор");
	
	ТОК_Отладка.о("Создание копий контекста подписчиков");
	Для НомерПодписчика = 0 По ПодписчикиСобытий.Количество()-1 Цикл
		ВекторКонтекстов = ПодписчикиСобытий.Получить(НомерПодписчика);
		ИдСобытия = ПодписчикиСобытий.ПолучитьКлюч(НомерПодписчика);
		
		т2 = "Копирование подписчиков события :: "+ИдСобытия;
		ТОК_Отладка.о(т2);
		
		Для НомерКонтекста = 0 По ВекторКонтекстов.Количество()-1 Цикл
			
			ВекторТекКонтекста 	= ВекторКонтекстов.Получить(НомерКонтекста);
			КонтекстПодписчика 	= ВекторТекКонтекста.Получить("КонтекстОбработчика");
			ВызываемыйМетод		= ВекторТекКонтекста.Получить("ВызываемыйМетод");
			ИдПодписчика = ВекторКонтекстов.ПолучитьКлюч(НомерКонтекста);
			
			ТипКонтекста = ТипЗначенияСтр(КонтекстПодписчика);
			Если ВекторТиповКонтекстов.НайтиКлюч(ТипКонтекста,0) = -1 Тогда
				
				
				ВыполняемыйМодуль = СоздатьОбъект("ВыполняемыйМодуль");
				ВыполняемыйМодуль.НазначитьКонтекст(КонтекстФормы);
				ТекстМодуля = "Функция СоздатьКонтекстПодписчика()
				|	Возврат СоздатьОбъект("""+ТипЗначенияСтр(КонтекстПодписчика)+""")
				|КонецФункции";
				
				//Сообщить(ТекстМодуля);				
				//Предупреждение(ТекстМодуля,5);				
				ВыполняемыйМодуль.УстановитьМодуль(ТекстМодуля);
				ВыполняемыйМодуль.КомпилироватьМодуль();
				ВыполняемыйМодуль.ВыполнитьМодуль();
				НовыйКонтекстПодписчика = ВыполняемыйМодуль.СоздатьКонтекстПодписчика();
				ВекторТиповКонтекстов.Добавить(НовыйКонтекстПодписчика, ТипКонтекста);
			КонецЕсли;
			
			НовыйКонтекстПодписчика = ВекторТиповКонтекстов.Получить(ТипКонтекста);
			
			ВыполняемыйМодуль.НазначитьКонтекст(НовыйКонтекстПодписчика);
			ВыполняемыйМодуль.УстановитьМодуль("Процедура УстановитьСвойствоКонтекстФормы(пКонтекстФормы) Экспорт
			|л = КонтекстФормы;
			|КонтекстФормы = пКонтекстФормы
			|КонецПроцедуры");
			
			т3 = "Установка свойства КонтекстФормы для :: "+ИдПодписчика;
			ТОК_Отладка.о(т3);
			Попытка
				ВыполняемыйМодуль.КомпилироватьМодуль();
				ВыполняемыйМодуль.ВыполнитьМодуль();
				ВыполняемыйМодуль.УстановитьСвойствоКонтекстФормы(КонтекстФормы);
				ТОК_Отладка.Соо("				Установлено свойство подписчика КонтекстФормы");
			Исключение
				ТОК_Отладка.Соо("				НЕ УДАЛОСЬ Установить свойство подписчика КонтекстФормы");
			КонецПопытки;	
			
			ТОК_Отладка.з(т3);
			
			ТОК_Отладка.Соо("				::ИдСобытия::"+ИдСобытия+"::ИдПодписчика::"+ИдПодписчика);
			ПерехватчикГК.ДобавитьПодписчикаСобытия(НовыйКонтекстПодписчика, ИдПодписчика, ИдСобытия, ВызываемыйМетод);
			
		КонецЦикла;
		
		ТОК_Отладка.з(т2);
	КонецЦикла;
	ТОК_Отладка.з("Создание копий контекста подписчиков");
		
	ПерехватчикГК.ВключитьПерехватСобытийГК(КонтекстФормы);
//	Рез = ПерехватчикГК.СообщитьПодписчикам("ПриОткрытии",СЗПараметры); //-(MA)@TOC, 2020.12.11 [Фабрика событий]
	
	ТОК_Отладка.з(т1);

	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции

Функция  СобытиеГМ_ПослеСозданияФормы(пКонтекстФормы) Экспорт
	фн = "СобытиеГМ_ПослеСозданияФормы";
	ТОК_Отладка.о(фн);
	
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КонтекстФормы", пКонтекстФормы);
	
	Рез = СообщитьПодписчикам("ГМ_ПослеСозданияФормы", СЗПараметры);
	//Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПослеСозданияФормы", пКонтекстФормы); //Почему-то ругается
	ТОК_Отладка.з(фн);
	Возврат Рез;
КонецФункции

Функция СобытиеГМ_ПриУдаленииДокумента(Док,Режим) Экспорт
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Док", Док);
	СЗПараметры.Установить("Режим", Режим);
	СообщитьПодписчикам("ПриУдаленииДокумента",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриУдаленииДокумента",Док,Режим);
	
	Возврат Рез;
КонецФункции

Функция СобытиеГМ_ПриИзмененииВремениДокумента(Док) Экспорт
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Док", Док);
	СообщитьПодписчикам("ПриИзмененииВремениДокумента",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриИзмененииВремениДокумента",Док);
	
	Возврат Рез;
КонецФункции	

Функция СобытиеГМ_ПриОтменеПроведенияДокумента(Док) Экспорт
	Рез = 1;
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Док", Док);
	СообщитьПодписчикам("ПриОтменеПроведенияДокумента",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГлобальногоМодуля("ПриОтменеПроведенияДокумента",Док);
	
	Возврат Рез;
КонецФункции	
	
//}

//{ предопределенные события формы 1С

Процедура Событие_ПриПовторномОткрытии() Экспорт
	СообщитьПодписчикам("ПриПовторномОткрытии");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриПовторномОткрытии");
КонецПроцедуры

Процедура Событие_ПриЗакрытии() Экспорт
	СообщитьПодписчикам("ПриЗакрытии");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриЗакрытии");
КонецПроцедуры

Функция Событие_ПриВыбореЗакладки(НомерЗакладки,ЗначениеЗакладки) Экспорт
	фн = "Событие_ПриВыбореЗакладки";
	ТОК_Отладка.о(фн);
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("НомерЗакладки",НомерЗакладки);
	СЗПараметры.Установить("ЗначениеЗакладки",ЗначениеЗакладки);
	Рез = СообщитьПодписчикам("ПриВыбореЗакладки",СЗПараметры);
	
	Если Рез = 0 Тогда
		ТОК_Отладка.з(фн);
		Возврат Рез;
	КонецЕсли;
	
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВыбореЗакладки",НомерЗакладки,ЗначениеЗакладки);
	
	Рез = СообщитьПодписчикам("ПриВыбореЗакладкиПосле", СЗПараметры);
	
	ТОК_Отладка.з();
	Возврат Рез;
КонецФункции

Процедура Событие_ОбработкаПодбора(Элемент,КонтекстФормыПодбора) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Элемент",Элемент);
	СЗПараметры.Установить("КонтекстФормыПодбора",КонтекстФормыПодбора);
	СообщитьПодписчикам("ОбработкаПодбора",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ОбработкаПодбора",Элемент,КонтекстФормыПодбора);
КонецПроцедуры

Процедура Событие_ПриНачалеВыбораЗначения(ИДАтрибута,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ИДАтрибута",ИДАтрибута);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНачалеВыбораЗначения",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНачалеВыбораЗначения",ИДАтрибута,ФСО);
КонецПроцедуры

Процедура Событие_ОбработкаВыбораЗначения(ВыбЗнач,ИДАтрибута,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ВыбЗнач",ВыбЗнач);
	СЗПараметры.Установить("ИДАтрибута",ИДАтрибута);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ОбработкаВыбораЗначения",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ОбработкаВыбораЗначения",ВыбЗнач,ИДАтрибута,ФСО);
КонецПроцедуры

Процедура Событие_ПриВыбореСтроки() Экспорт
	СообщитьПодписчикам("ПриВыбореСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВыбореСтроки");
КонецПроцедуры

Процедура Событие_ВводНового() Экспорт
	СообщитьПодписчикам("ВводНового");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ВводНового");
КонецПроцедуры

Процедура Событие_ПриВыбореЯчейкиТаблицы(Адрес,Значение) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Адрес",Адрес);
	СЗПараметры.Установить("Значение",Значение);
	СообщитьПодписчикам("ПриВыбореЯчейкиТаблицы",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВыбореЯчейкиТаблицы",Адрес,Значение);
КонецПроцедуры

Процедура Событие_ПриЗаписи() Экспорт
	СообщитьПодписчикам("ПриЗаписи");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриЗаписи");
КонецПроцедуры

Процедура Событие_ВводНаОсновании(ДокОснование) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ДокОснование",ДокОснование);
	СообщитьПодписчикам("ВводНаОсновании",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ВводНаОсновании",ДокОснование);
КонецПроцедуры

Процедура Событие_ПриВводеСтроки() Экспорт
	СообщитьПодписчикам("ПриВводеСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриВводеСтроки");
КонецПроцедуры

Процедура Событие_ПриРедактированииНовойСтроки() Экспорт
	СообщитьПодписчикам("ПриРедактированииНовойСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриРедактированииНовойСтроки");
КонецПроцедуры

Процедура Событие_ПриНачалеРедактированияСтроки() Экспорт
	СообщитьПодписчикам("ПриНачалеРедактированияСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНачалеРедактированияСтроки");
КонецПроцедуры

Процедура Событие_ПриОкончанииРедактированияСтроки(ФлагНовойСтроки) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ФлагНовойСтроки",ФлагНовойСтроки);
	СообщитьПодписчикам("ПриОкончанииРедактированияСтроки",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОкончанииРедактированияСтроки",ФлагНовойСтроки);
КонецПроцедуры

Процедура Событие_ПриИзмененииПорядкаСтрок(Действие) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Действие",Действие);
	СообщитьПодписчикам("ПриИзмененииПорядкаСтрок",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриИзмененииПорядкаСтрок",Действие);
КонецПроцедуры

Процедура Событие_ПриУдаленииСтроки(Действие) Экспорт
	СообщитьПодписчикам("ПриУдаленииСтроки");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриУдаленииСтроки");
КонецПроцедуры

//}

//{ предопределенные события FormEx

Процедура Событие_ПиктограммаМногострочнойЧасти(НомерПиктограммы) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("НомерПиктограммы",НомерПиктограммы);
	СообщитьПодписчикам("ПиктограммаМногострочнойЧасти",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПиктограммаМногострочнойЧасти",НомерПиктограммы);
КонецПроцедуры

Процедура Событие_ПослеЗакрытия() Экспорт
	СообщитьПодписчикам("ПослеЗакрытия");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеЗакрытия");
КонецПроцедуры

Процедура Событие_ПослеОбновленияФормы() Экспорт
	СообщитьПодписчикам("ПослеОбновленияФормы");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеОбновленияФормы");
КонецПроцедуры

Процедура Событие_ПослеОткрытия() Экспорт
	ТОК_Отладка.Соо("Событие_ПослеОткрытия");
	СообщитьПодписчикам("ПослеОткрытия");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеОткрытия");
КонецПроцедуры

Процедура Событие_ПослеСозданияФормы() Экспорт
	СообщитьПодписчикам("ПослеСозданияФормы");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПослеСозданияФормы");
КонецПроцедуры

Процедура Событие_ПриАктивацииОкна() Экспорт
	СообщитьПодписчикам("ПриАктивацииОкна");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриАктивацииОкна");
КонецПроцедуры

Процедура Событие_ПриДвиженииМыши(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриДвиженииМыши",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДвиженииМыши",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриДвойномНажатииЛевойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриДвойномНажатииЛевойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДвойномНажатииЛевойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриДвойномНажатииПравойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриДвойномНажатииПравойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДвойномНажатииПравойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриДеактивацииОкна() Экспорт
	СообщитьПодписчикам("ПриДеактивацииОкна");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриДеактивацииОкна");
КонецПроцедуры

Процедура Событие_ПриИзмененииРазмераОкна(ТипСобытия,Ширина,Высота) Экспорт
	ТОК_Отладка.Соо("Событие_ПриИзмененииРазмераОкна");
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("ТипСобытия",ТипСобытия);
	СЗПараметры.Установить("Ширина",Ширина);
	СЗПараметры.Установить("Высота",Высота);
	СообщитьПодписчикам("ПриИзмененииРазмераОкна",СЗПараметры);
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриИзмененииРазмераОкна",ТипСобытия,Ширина,Высота);
КонецПроцедуры

Процедура Событие_ПриНажатииКнопкиКлавиатуры(КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КодКлавиши",КодКлавиши);
	СЗПараметры.Установить("ФлагAlt",ФлагAlt);
	СЗПараметры.Установить("ФлагShift",ФлагShift);
	СЗПараметры.Установить("ФлагCtrl",ФлагCtrl);
	СЗПараметры.Установить("Символ",Символ);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНажатииКнопкиКлавиатуры",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНажатииКнопкиКлавиатуры",КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО);
КонецПроцедуры

Процедура Событие_ПриНажатииЛевойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНажатииЛевойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНажатииЛевойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриНажатииПравойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриНажатииПравойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриНажатииПравойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриОтжатииКнопкиКлавиатуры(КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("КодКлавиши",КодКлавиши);
	СЗПараметры.Установить("ФлагAlt",ФлагAlt);
	СЗПараметры.Установить("ФлагShift",ФлагShift);
	СЗПараметры.Установить("ФлагCtrl",ФлагCtrl);
	СЗПараметры.Установить("Символ",Символ);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриОтжатииКнопкиКлавиатуры",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОтжатииКнопкиКлавиатуры",КодКлавиши,ФлагAlt,ФлагShift,ФлагCtrl,Символ,ФСО);
КонецПроцедуры

Процедура Событие_ПриОтжатииЛевойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриОтжатииЛевойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОтжатииЛевойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

Процедура Событие_ПриОтжатииПравойКнопки(Сост,х,у,ФСО) Экспорт
	СЗПараметры = СоздатьОбъект("СписокЗначений");
	СЗПараметры.Установить("Сост",Сост);
	СЗПараметры.Установить("х",х);
	СЗПараметры.Установить("у",у);
	СЗПараметры.Установить("ФСО",ФСО);
	СообщитьПодписчикам("ПриОтжатииПравойКнопки",СЗПараметры);
	ФСО = СЗПараметры.Получить("ФСО");
	Перехватчик.ВыполнитьОригинальноеСобытиеГК(КонтекстФормы,"ПриОтжатииПравойКнопки",Сост,х,у,ФСО);
КонецПроцедуры

//}

//======================================================================
Функция ЭтоОбработчикСобытия(ИмяМетода)
	Рез = 0;
	
	Если Найти(ИмяМетода, "Событие_") <> 0 Тогда
		Рез = 1;
	КонецЕсли;

	Если Рез = 0 Тогда
		Если Найти(ИмяМетода, "СобытиеГМ_") <> 0 Тогда
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЭтоОбработчикСобытия
//======================================================================
Функция НайтиОбработчик(ТаблицаМетодов, ИмяМетодаДляПоиска)
	
	Сообщить(ИмяМетодаДляПоиска);
	
	Рез = "";
	ТаблицаМетодов.ВыбратьСтроки();
	Пока ТаблицаМетодов.ПолучитьСтроку() = 1 Цикл
		ТекИмяМетода = ?(СокрЛП(ТаблицаМетодов.NameRus) = "", ТаблицаМетодов.NameEng, ТаблицаМетодов.NameRus) ;
		Если ТекИмяМетода = ИмяМетодаДляПоиска Тогда
			Рез = ТекИмяМетода;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТОК_Отладка.Соо("ИмяМетодаДляПоиска :: "+ИмяМетодаДляПоиска+" Найденое имя :: "+Рез );
	Возврат Рез;
КонецФункции // НайтиОбработчик
//======================================================================
Процедура  ПодписатьОбъектНаФабрику(КонтекстОбработчика) Экспорт
	фн = "ПодписатьКлассНаФабрику";
	ТОК_Отладка.о(фн);
	
	ИдПодписчика = ТипЗначенияСтр(КонтекстОбработчика);
	ИдПодписчика = СтрЗаменить(ИдПодписчика, ".","");
	ИдПодписчика = СокрЛП(ИдПодписчика) + _GetPerformanceCounter();
	
	ТаблицаМетодовОбработчика = Информатор.ПолучитьТаблицуМетодов(КонтекстОбработчика);
	Сообщить("ТаблицаМетодовОбработчика");
	ТаблицаМетодовОбработчика.ВыбратьСтроку();
	
	ТаблицаМетодовФабрики = Информатор.ПолучитьТаблицуМетодов(я());
	Сообщить("ТаблицаМетодовФабрики");
	ТаблицаМетодовФабрики.ВыбратьСтроку();
	
	ТаблицаМетодовФабрики.ВыбратьСтроки();
	Пока ТаблицаМетодовФабрики.ПолучитьСтроку() = 1 Цикл
		ИмяМетодаФабрики = ТаблицаМетодовФабрики.NameRus;
		Если ЭтоОбработчикСобытия(ИмяМетодаФабрики) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетодаФабрикиСПрефиксом	= ИмяМетодаФабрики;
		ИмяМетодаФабрикиБезПрефикса = СтрЗаменить(ИмяМетодаФабрикиСПрефиксом,	"Событие_",		"");
		ИмяМетодаФабрикиБезПрефикса = СтрЗаменить(ИмяМетодаФабрикиБезПрефикса, 	"СобытиеГМ_", 	"");
		ИмяМетодаФабрикиБезПрефиксаПосле = ИмяМетодаФабрикиБезПрефикса + "После";
		
		ИмяМетодаОбработчика = "";
		ИмяМетодаОбработчика = ?(ИмяМетодаОбработчика <> "", ИмяМетодаОбработчика , НайтиОбработчик(ТаблицаМетодовОбработчика, 
																										ИмяМетодаФабрикиБезПрефикса));
		ИмяМетодаОбработчика = ?(ИмяМетодаОбработчика <> "", ИмяМетодаОбработчика , НайтиОбработчик(ТаблицаМетодовОбработчика, 
																										ИмяМетодаФабрикиБезПрефиксаПосле));
		ИмяМетодаОбработчика = ?(ИмяМетодаОбработчика <> "", ИмяМетодаОбработчика , НайтиОбработчик(ТаблицаМетодовОбработчика, 
																										ИмяМетодаФабрикиСПрефиксом));
				
		Если ИмяМетодаОбработчика = "" Тогда
			Продолжить;
		КонецЕсли;
		
		я().ДобавитьПодписчикаСобытия(КонтекстОбработчика, ИдПодписчика, ИмяМетодаОбработчика, ИмяМетодаОбработчика);
	КонецЦикла;
	
	ТОК_Отладка.з(фн);
КонецПроцедуры

